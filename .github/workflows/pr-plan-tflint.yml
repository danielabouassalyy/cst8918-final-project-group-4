name: PR TFLint & Plan

on:
  pull_request:
    branches: [ main ]

# Allow this job to request an OIDC token for Azure login
permissions:
  id-token: write     # required for azure/login
  contents: read      # checkout needs this

jobs:
  plan-per-module:
    name: plan-${{ matrix.moduleName }} 
    runs-on: ubuntu-latest

    strategy:
      matrix:
        include:
          - modulePath: "modules/blob-backend"
            moduleName: "blob-backend"
            plan_vars: >-
              -var="resource_group_name=cst8918-final-project-group-4"
              -var="location=canadacentral"
              -var="storage_account_name=abou0344tfstate"
              -var="container_name=tfstate"

          - modulePath: "modules/network"
            moduleName: "network"
            plan_vars: >-
              -var="resource_group_name=cst8918-final-project-group-4"
              -var="location=canadacentral"
              -var="vnet_cidr=10.0.0.0/14"
              -var='subnet_prefixes={prod="10.0.0.0/16",test="10.1.0.0/16",dev="10.2.0.0/16",admin="10.3.0.0/16"}'

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # üîç sanity‚Äëcheck: secret lengths
      - name: üîç Echo secret lengths
        run: |
          echo "CLIENT  len=${#AZURE_CLIENT_ID}"
          echo "TENANT  len=${#AZURE_TENANT_ID}"
          echo "SUBS    len=${#AZURE_SUBSCRIPTION_ID}"
        env:
          AZURE_CLIENT_ID:       ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID:       ${{ secrets.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Azure Login via OIDC
        uses: azure/login@v1
        with:
          client-id:       ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id:       ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.0"

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v1

      # one init for TFLint (no backend needed)
      - name: Terraform Init for lint
        run: terraform init -backend=false

      - name: TFLint
        run: tflint

      - name: Plan module ${{ matrix.moduleName }}
        working-directory: ${{ matrix.modulePath }}
        run: |
          terraform init -backend=false
          terraform plan \
            -out=tfplan-${{ matrix.moduleName }} \
            -lock=false \
            -input=false \
            -refresh=false \
            ${{ matrix.plan_vars }}
